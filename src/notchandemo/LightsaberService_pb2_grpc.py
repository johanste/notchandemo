# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import LightsaberService_pb2 as LightsaberService__pb2

class LightsaberServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel, subscription_id, session_id='Test'):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeSession = channel.unary_stream(
                f'/Lightsaber.LightsaberService/SubscribeSession/SubscriptionId/{subscription_id}/SessionId/{session_id}', # '/Lightsaber.LightsaberService/SubscribeSession',
                request_serializer=LightsaberService__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=LightsaberService__pb2.SubscriptionResponse.FromString,
                )
        self.TerminalSubscribeSession = channel.unary_stream(
                '/Lightsaber.LightsaberService/TerminalSubscribeSession',
                request_serializer=LightsaberService__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=LightsaberService__pb2.SubscriptionResponse.FromString,
                )


class LightsaberServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeSession(self, request, context):
        """This action will establish session with other regions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminalSubscribeSession(self, request, context):
        """The idea is this action will not call other regions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LightsaberServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeSession': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSession,
                    request_deserializer=LightsaberService__pb2.SubscriptionRequest.FromString,
                    response_serializer=LightsaberService__pb2.SubscriptionResponse.SerializeToString,
            ),
            'TerminalSubscribeSession': grpc.unary_stream_rpc_method_handler(
                    servicer.TerminalSubscribeSession,
                    request_deserializer=LightsaberService__pb2.SubscriptionRequest.FromString,
                    response_serializer=LightsaberService__pb2.SubscriptionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Lightsaber.LightsaberService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LightsaberService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Lightsaber.LightsaberService/SubscribeSession',
            LightsaberService__pb2.SubscriptionRequest.SerializeToString,
            LightsaberService__pb2.SubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminalSubscribeSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Lightsaber.LightsaberService/TerminalSubscribeSession',
            LightsaberService__pb2.SubscriptionRequest.SerializeToString,
            LightsaberService__pb2.SubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
